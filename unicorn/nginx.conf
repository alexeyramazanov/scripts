user  deploy;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;

    sendfile on;
    tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
    tcp_nodelay off; # on may be better for some Comet/long-poll stuff

    keepalive_timeout  65;

    gzip on;
    gzip_http_version 1.0;
    gzip_proxied any;
    gzip_min_length 500;
    gzip_disable "MSIE [1-6]\.";
    gzip_types text/plain text/xml text/css
               text/comma-separated-values
               text/javascript application/x-javascript
               application/atom+xml;

    upstream app_server {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response (in case the Unicorn master nukes a
        # single worker for timing out).

        # for UNIX domain socket setups:
        server unix:/var/www/app/tmp/sockets/unicorn.sock fail_timeout=0;

        # for TCP setups, point these to your backend servers
        # server 192.168.0.7:8080 fail_timeout=0;
        # server 192.168.0.8:8080 fail_timeout=0;
        # server 192.168.0.9:8080 fail_timeout=0;
    }

    server {
        listen 80 default deferred;
        server_name server-name.com;

        access_log  /var/www/app/log/server-name.com.access.log;
        error_log   /var/www/app/log/server-name.com.error.log;

        client_max_body_size 10m;
        keepalive_timeout 5;

        root /var/www/app/public;

        # Prefer to serve static files directly from nginx to avoid unnecessary
        # data copies from the application server.
        try_files $uri/index.html $uri.html $uri @app;

        location @app {
            # an HTTP header important enough to have its own Wikipedia entry:
            # http://en.wikipedia.org/wiki/X-Forwarded-For
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # enable this if you forward HTTPS traffic to unicorn,
            # this helps Rack set the proper URL scheme for doing redirects:
            proxy_set_header X-Forwarded-Proto $scheme;

            # pass the Host: header from the client right along so redirects
            # can be set properly within the Rack application
            proxy_set_header Host $http_host;

            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;

            proxy_pass http://app_server;

            # maintenance mode
            if (-f $document_root/maintenance.html) {
                return 503;
            }
        }

        # Rails error pages
        error_page 500 502 503 504 /500.html;
        location = /500.html {
            root /var/www/app/public;
        }

        # maintenance page
        error_page 503 @maintenance;
        location @maintenance {
            rewrite  ^(.*)$  /maintenance.html break;
        }

        # VCS protection
        location ~ /\.svn/* {
            deny  all;
        }
        location ~ /\.git/* {
            deny  all;
        }
    }
}
